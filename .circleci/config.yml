# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: circleci/python:3.7.5
      - image: postgres:latest
        environment:
          POSTGRES_DB: django_ci
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      
      - run:
          name: Install dependencies
          command: |
            pip3 install --upgrade pip --user
            pip3 install -r requirements.txt --user

      - run:
          name: Format with black
          command: |
            pip install black
            # format the files with black
            black .

      - run:
          name: Lint with flake8
          command: |
            pip install flake8
            # stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - run:
          name: Sort imports
          command: |
            pip install isort
            # stop the build if there are Python syntax errors or undefined names
            isort .
            isort --check --diff .

      - run:
          name: Setup test database
          command: |
            # export DATABASE_URL=postgres://{ database-user }:{ database-password }@{ database-host }:{ database-port }/{ database-name }
            export DATABASE_URL=postgres://postgres:postgres@$127.0.0.1:5432/django_ci

      - run:
          name: Run migrations
          command: |
            export CIRCLE_CI_WORKFLOW=True
            python manage.py makemigrations --check --dry-run
            python manage.py migrate
            python manage.py migrate --run-syncdb
            python manage.py check

      - run:
          name: Run tests
          command: |
            export CIRCLE_CI_WORKFLOW=True
            python manage.py test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
